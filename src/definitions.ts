import fs from "fs";

export default class DefinitionGenerator {
  private definitions = {};

  public parseDefinitions(definitions: any) {
    const defKeys = Object.keys(definitions);

    defKeys.forEach((key) => {
      const definition: any = definitions[key];
      const klassDef = this.parseDefinition(key, definition);

      fs.writeFileSync(
        `generated/models/${this.getClassName(key)}.ts`,
        klassDef.join("\n")
      );
    });
  }

  private getClassName(className: string): string {
    return className.replace(/\./g, "");
  }

  public getType(key: string, prop: any, imports: string[]): string {
    const { type, format, description, items, enum: en, $ref } = prop;

    if (type === "integer") {
      return "number";
    } else if (type === "array") {
      return `${this.getType("", items, imports)}[]`;
    } else if (type === undefined && $ref) {
      const klass = this.getClassName($ref.substr(14));
      if (!imports.includes(klass)) {
        imports.push(klass);
      }
      return klass;
    } else {
      return type;
    }
  }

  private parseDefinition(klass: string, definition: any): string[] {
    const { type, required, properties } = definition;
    const fileImports: string[] = [];
    const classDefintion: string[] = [
      "// This file is autogenerated - do not change",
      "",
      `export default interface ${this.getClassName(klass)} {`,
    ];

    if (properties) {
      Object.keys(properties).forEach((key: string) => {
        const prop = properties[key];
        const { type, format, description, items, enum: en } = prop;
        classDefintion.push("");

        if (required && required.includes(key)) {
          classDefintion.push(`    // *Required field`);
        }
        if (description) {
          classDefintion.push(`    // ${description}`);
        }
        classDefintion.push(
          `    ${key}: ${this.getType(key, prop, fileImports)};`
        );
      });
    } else {
      console.log(klass);
      console.log(definition);
    }

    classDefintion.push("}");

    fileImports.forEach((fileImport: string) => {
      classDefintion.splice(
        1,
        0,
        `import ${fileImport} from './${fileImport}'`
      );
    });

    return classDefintion;
  }
}
